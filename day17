110.平衡二叉树 

    public boolean isBalanced(TreeNode root) {
        return getHeight(root) != -1;
    }
    private int getHeight(TreeNode root){
        if(root == null) return 0;
        int leftHeight = getHeight(root.left);
        if(leftHeight == -1) return -1;
        int rightHeight = getHeight(root.right);
        if(rightHeight == -1) return -1;
        if(Math.abs(leftHeight - rightHeight) > 1) return -1;
        return Math.max(leftHeight, rightHeight) +1;
    }
257. 二叉树的所有路径 

    List<String> res = new ArrayList<>();
    public List<String> binaryTreePaths(TreeNode root) {
        if(root == null) return res;
        List<Integer> curr = new ArrayList<>();
        traverse(root,curr);
        return res;
    }
    private void traverse(TreeNode root, List<Integer> curr){
        curr.add(root.val);
        if(root.left == null && root.right == null){
            StringBuilder sb = new StringBuilder();
            for(int i = 0;i<curr.size()-1;i++){
                sb.append(curr.get(i)).append("->");
            }
            sb.append(curr.get(curr.size() - 1));
            res.add(sb.toString());
            return;
        }
        if(root.left != null){
            traverse(root.left, curr);
            curr.remove(curr.size() -1);
        }
        if(root.right != null){
            traverse(root.right, curr);
            curr.remove(curr.size() -1);
        }
    }
404.左叶子之和

    public int sumOfLeftLeaves(TreeNode root) {
        if(root == null) return 0;
        if(root.left ==null && root.right == null) return 0;
        int leftSum = sumOfLeftLeaves(root.left);
        int rightSum = sumOfLeftLeaves(root.right);
        int count = 0;
        //判断节点是否有左孩子
        if(root.left != null && root.left.left == null && root.left.right == null) count = root.left.val;
        return count + leftSum + rightSum;
    }
