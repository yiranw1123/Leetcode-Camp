找树左下角的值
    
    
    int maxDepth = 0;
    int val = Integer.MAX_VALUE;
    public int findBottomLeftValue(TreeNode root) {
        val = root.val;
        traverse(root, 0);
        return val;
    }
    public void traverse(TreeNode root, int depth){
        if(root == null) return;
        if(root.left == null && root.right == null){
            if(depth > maxDepth){
                val = root.val;
                maxDepth = depth;
            }
        }
        if(root.left != null) traverse(root.left, depth +1);
        if(root.right != null) traverse(root.right, depth +1);
    }


路径总和

public boolean hasPathSum(TreeNode root, int targetSum) {
    if(root == null) return false;
    if(root.left == null && root.right == null && targetSum - root.val ==0)return true;
    return hasPathSum(root.left, targetSum - root.val) || hasPathSum(root.right, targetSum - root.val);
}

路径总和2
    List<List<Integer>> res = new ArrayList<>();
    LinkedList<Integer> path = new LinkedList<>();
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if(root == null) return res;
        traverse(root, targetSum);
        return res;
    }

    private void traverse(TreeNode root, int targetSum){
        path.add(root.val);
        if(root.left == null && root.right == null){
            if(targetSum - root.val == 0){
                res.add(new ArrayList<>(path));
            }
            return;
        }
        if(root.left != null){
            traverse(root.left, targetSum - root.val);
            path.removeLast();
        }

        if(root.right != null){
            traverse(root.right, targetSum - root.val);
            path.removeLast();
        }  
    }

前序中序二叉树

class Solution {
    Map<Integer, Integer> map;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        map = new HashMap<>();
        for(int i = 0;i< inorder.length;i++){
            map.put(inorder[i], i);
        }
        return findNode(inorder, 0, inorder.length, postorder, 0, postorder.length);
    }
    public TreeNode findNode(int[] inorder, int inBegin, int inEnd, int[] postorder, int postBegin, int postEnd){
        if(inBegin >= inEnd || postBegin >= postEnd) return null;
        int rootIndex = map.get(postorder[postEnd -1]);
        TreeNode root = new TreeNode(inorder[rootIndex]);
        int lenLeft = rootIndex - inBegin;
        root.left = findNode(inorder, inBegin, rootIndex, postorder, postBegin, postBegin + lenLeft);
        //                                                                                   移除根节点
        root.right = findNode(inorder, rootIndex+1, inEnd, postorder, postBegin + lenLeft , postEnd - 1);
        return root;
    }
}

中序+后序建立二叉树

class Solution {
    Map<Integer, Integer> map;
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        map = new HashMap<>();
        for(int i = 0;i< inorder.length;i++){
            map.put(inorder[i], i);
        }
        return findNode(inorder, 0, inorder.length, postorder, 0, postorder.length);
    }
    public TreeNode findNode(int[] inorder, int inBegin, int inEnd, int[] postorder, int postBegin, int postEnd){
        if(inBegin >= inEnd || postBegin >= postEnd) return null;
        int rootIndex = map.get(postorder[postEnd -1]);
        TreeNode root = new TreeNode(inorder[rootIndex]);
        int lenLeft = rootIndex - inBegin;
        root.left = findNode(inorder, inBegin, rootIndex, postorder, postBegin, postBegin + lenLeft);
        //                                                                                   移除根节点
        root.right = findNode(inorder, rootIndex+1, inEnd, postorder, postBegin + lenLeft , postEnd - 1);
        return root;
    }
}
