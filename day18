找树左下角的值
    
    
    int maxDepth = 0;
    int val = Integer.MAX_VALUE;
    public int findBottomLeftValue(TreeNode root) {
        val = root.val;
        traverse(root, 0);
        return val;
    }
    public void traverse(TreeNode root, int depth){
        if(root == null) return;
        if(root.left == null && root.right == null){
            if(depth > maxDepth){
                val = root.val;
                maxDepth = depth;
            }
        }
        if(root.left != null) traverse(root.left, depth +1);
        if(root.right != null) traverse(root.right, depth +1);
    }


路径总和

public boolean hasPathSum(TreeNode root, int targetSum) {
    if(root == null) return false;
    if(root.left == null && root.right == null && targetSum - root.val ==0)return true;
    return hasPathSum(root.left, targetSum - root.val) || hasPathSum(root.right, targetSum - root.val);
}

路径总和2
    List<List<Integer>> res = new ArrayList<>();
    LinkedList<Integer> path = new LinkedList<>();
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        if(root == null) return res;
        traverse(root, targetSum);
        return res;
    }

    private void traverse(TreeNode root, int targetSum){
        path.add(root.val);
        if(root.left == null && root.right == null){
            if(targetSum - root.val == 0){
                res.add(new ArrayList<>(path));
            }
            return;
        }
        if(root.left != null){
            traverse(root.left, targetSum - root.val);
            path.removeLast();
        }

        if(root.right != null){
            traverse(root.right, targetSum - root.val);
            path.removeLast();
        }  
    }
