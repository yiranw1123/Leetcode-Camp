977. 有序数组的平方

第一遍：用两个指针， 先将数组分为两部分：正数部分，负数部分。然后用合并数组的方法得到结果。注意处理当任意一个数组没有剩余元素的情况。

public int[] sortedSquares(int[] nums) {
        int n = nums.length;
        int negative = -1;
        for(int i = 0;i<n;i++){
            if(nums[i] < 0){
                negative = i;
            } else break;
        }
        int i = negative, j = negative +1;
        int[] res = new int[n];
        int k = 0;
        while(i>=0 || j<n){
            if(i<0){
                res[k] = nums[j] * nums[j];
                j++;
            } else if(j == n){
                res[k] = nums[i] * nums[i];
                i--;
            } else if(nums[i] * nums[i] < nums[j] * nums[j]){
                res[k] = nums[i] * nums[i];
                i--;
            } else{
                res[k] = nums[j] * nums[j];
                j++;
            }
            k++;
        }
        return res;
    }
    
    
    def sortedSquares(self, nums: List[int]) -> List[int]:
        n = len(nums)
        negative = 0
        res = list() //新建list
        for i, num in enumerate(nums):
            if num < 0: negative = i
            else: break

        i, j = negative, negative+1
        while i>=0 or j<n:
            if i<0:
                res.append(nums[j] * nums[j])
                j+=1
            elif j==n:
                res.append(nums[i] * nums[i])
                i-=1
            elif nums[i] * nums[i] < nums[j] * nums[j]:
                res.append(nums[i] * nums[i])
                i-=1
            else:
                res.append(nums[j] * nums[j])
                j+=1
        return res
        
优化：双指针分别从头尾开始，比较大小然后放入res数组


    def sortedSquares(self, nums: List[int]) -> List[int]:
        n = len(nums)
        res = [0] * n
        i, j, pos = 0, n-1, n-1

        while i<=j:
            if nums[i] * nums[i] > nums[j] * nums[j]:
                res[pos] = nums[i] * nums[i]
                i+=1
            else:
                res[pos] = nums[j] * nums[j]
                j-=1
            pos -= 1
        return res
        
209.和等于target的长度最小的子数组

滑动窗口

    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        n = len(nums)
        left = 0
        right = 0
        res = float('inf') 
        s = 0
        while right < n:
            s += nums[right]
            while s >= target:        //因为要找最短长度，所以只要和满足target就应该一直shrink left
                res = min(res, right - left+1)
                s -= nums[left]
                left+=1
            right +=1
        
        if res != float('inf'): return res
        else: return 0
        
        
59.螺旋矩阵2

- 循环顺序，需要四个变量来控制。注意保持循环不变量一致：左闭右闭区间
           upper
     ---------------
left｜              ｜ right
    ｜              ｜
    ｜              ｜
    ｜              ｜
    ｜              ｜
     ---------------
           lower


    public int[][] generateMatrix(int n) {
        int[][] res = new int[n][n];
        int upper_bound = 0, lower_bound = n - 1;
        int left_bound = 0, right_bound = n - 1;
        int num = 1;
        while(num<= n*n){
        
            if(upper_bound <= lower_bound){
                for(int i = left_bound;i<=right_bound;i++) res[upper_bound][i] = num++;
                upper_bound++;
            }
            if(left_bound <= right_bound){
                for(int i = upper_bound;i<=lower_bound;i++) res[i][right_bound] = num++;
                right_bound--;
            }
            if(upper_bound <= lower_bound){
                for(int i = right_bound;i>=left_bound;i--) res[lower_bound][i] = num++;
                lower_bound--;
            }
            if(left_bound <= right_bound){
                for(int i = lower_bound;i>=upper_bound;i--) res[i][left_bound] = num++;
                left_bound++;
            }
        }
        return res;
    }

