**[1143. 最长公共子序列](https://leetcode.cn/problems/longest-common-subsequence/)**

```java
public int longestCommonSubsequence(String text1, String text2) {
        int n = text1.length();
        int m = text2.length();
        if(n ==0 && m ==0){
            return 0;
        }
        //dp[i][j] 表示text1前i个字符和text2前j个字符最长公共子序列的长度
        int[][]dp = new int[n+1][m+1];
        for(int i = 1;i<n+1;i++){
            for(int j = 1;j<m+1;j++){
                dp[i][j] = Math.max(dp[i-1][j], dp[i][j-1]);
                if(text1.charAt(i-1)== text2.charAt(j-1)) {
                    dp[i][j] = Math.max(dp[i][j],dp[i-1][j-1]+1);
                }
            }
        }
        return dp[n][m];

    }
```

**[53. 最大子数组和](https://leetcode.cn/problems/maximum-subarray/)**

```java
public int maxSubArray(int[] nums) {
        int res = nums[0];
        int pre = nums[0];

        for(int i = 1;i<nums.length;i++){
            pre = Math.max(pre + nums[i], nums[i]);
            res = Math.max(res, pre);
        }

        return res;

}
```

**[392. 判断子序列](https://leetcode.cn/problems/is-subsequence/)**

```java
public boolean isSubsequence(String s, String t) {
        int i = 0, j = 0;
        while(i<s.length() && j<t.length()){
            if(s.charAt(i) == t.charAt(j)){i++;}
            j++;
        }
        return i == s.length();
}
```

**[115. 不同的子序列](https://leetcode.cn/problems/distinct-subsequences/)**

dp[i][j] → s[0…i-1] and t[0…j-1] matches or not

```java
class Solution {
    public int numDistinct(String s, String t) {
        int m = s.length(), n = t.length();
        s = " "+ s;
        t = " "+ t;

        char[] cs = s.toCharArray(), ct = t.toCharArray();
        int[][] dp = new int[m+1][n+1];

        for(int i = 0;i<=m;i++)dp[i][0] = 1;

        for(int i = 1;i<=m;i++){
            for(int j = 1;j<=n;j++){
                dp[i][j] = dp[i-1][j];

                if(cs[i] == ct[j]){
                    dp[i][j] += dp[i-1][j-1];
                }
            }
        }
        return dp[m][n];
    }
}
```

**[583. 两个字符串的删除操作](https://leetcode.cn/problems/delete-operation-for-two-strings/)**

```java
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        
        int[][] dp = new int[m+1][n+1];

        for(int i = 1;i<=m;i++){
            dp[i][0] = dp[i-1][0] + 1;
        }

        for(int i = 1;i<=n;i++){
            dp[0][i] = dp[0][i-1] + 1;
        }

        for(int i = 1;i<=m;i++){
            for(int j = 1;j<=n;j++){
                if(word1.charAt(i-1) != word2.charAt(j-1)){
                    dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1]) +1;
                } else{
                    dp[i][j] = dp[i-1][j-1];
                }
            }
        }
        return dp[m][n];
    }
}
```

**[72. 编辑距离](https://leetcode.cn/problems/edit-distance/)**

```java
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();

        int[][] dp = new int[m+1][n+1];

        for(int i = 1;i<=m;i++){
            dp[i][0] = i;
        }
        for(int i = 1;i<=n;i++){
            dp[0][i] = i;
        }

        //新增：当dp[i][j]要在word1新增一个字母与j进行匹配时，此时word1[i+1]=word2[j]，根据dp的定义，需要满足word1[i] = word2[j-1],所以是dp[i][j - 1] and 新增操作+1
        // 删除：当dp[i][j]要在word1删除一个字母与j进行匹配时，此时word1[i-1]=word2[j],所以是dp[i-1][j] and 删除操作+1
        // 替换：当dp[i][j]，进行在word1和word2的i和j位置进行替换的时候。说明之前的都是相同的，需要满足dp[i-1][j-1] and 替换操作+1
        for(int i = 1;i<=m;i++){
            for(int j = 1;j<=n;j++){
                if(word1.charAt(i-1) != word2.charAt(j-1)){
                    dp[i][j] = Math.min(Math.min(dp[i-1][j-1] + 1, dp[i-1][j] + 1), dp[i][j-1]+1);
                } else{
                    dp[i][j] = dp[i-1][j-1];
                }
            }
        }

        return dp[m][n];

    }
}
```

**[647. 回文子串](https://leetcode.cn/problems/palindromic-substrings/)**

2d dp自底向上，从右向左

求回文子串的数量

```java
class Solution {
    public int countSubstrings(String s) {
        int n = s.length();
        //if i...j is a palindrome
        boolean[][] dp = new boolean[n][n];
        int res = 0;

        for(int i = 0;i<n;i++){
            dp[i][i] = true;
            res += 1;
        }

        //aa
        for(int i = n -2;i>=0;i--){
            dp[i][i+1] = s.charAt(i) == s.charAt(i+1);
            if(dp[i][i+1]){
                res += 1;
            }
        }

        for(int i = n-3;i>=0;i--){
            for(int j = i+2;j<n;j++){
                dp[i][j] = dp[i+1][j-1] && (s.charAt(i) == s.charAt(j));
                if(dp[i][j]){
                    res += 1;
                }
            }
        }

        return res;
    }
}
```

中心扩散法

中心点可以由单个或两个字符组成

一共可能有多少个中心点？中心点由 `2 * len - 1` 个，分别是 `len` 个单字符和 `len - 1` 个双字符。

```java
class Solution {
    public int countSubstrings(String s) {
        int ans = 0;

        for(int center = 0;center< 2* s.length() - 1; center++){
            int left = center/2;
            int right = left + center %2;

            while(left>=0 && right <s.length() && s.charAt(left) == s.charAt(right)){
                ans++;
                left--;
                right++;
            }
        }
        return ans;
    }
}
```

5.最长回文子串

```java
// ababa 求最长公共子串
int len = s.length();
String result = "";    
for (int i = 0; i < len * 2 - 1; i++) {
        int left = i / 2;
        int right = left + i % 2;
        while (left >= 0 && right < len && s.charAt(left) == s.charAt(right)) {
            String tmp = s.substring(left, right + 1);
            if (tmp.length() > result.length()) {
                result = tmp;
            }
            left--;
            right++;
        }
    }
    return result;
}

```

**[516. 最长回文子序列](https://leetcode.cn/problems/longest-palindromic-subsequence/)**

```java
class Solution {
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        char[] arr = s.toCharArray();
        int[][] dp = new int[n][n];
        for(int len = 1;len<=n;len++){
            for(int l = 0;l+ len-1 <n;l++){
                int r = l+ len -1;
                if(len == 1){
                    dp[l][r] = 1;
                } else if(len == 2){
                    dp[l][r] = arr[l] == arr[r] ? 2: 1;
                } else{
                    dp[l][r] = Math.max(dp[l+1][r], dp[l][r-1]);
                    dp[l][r] = Math.max(dp[l][r], dp[l+1][r-1] + (arr[l] == arr[r] ? 2 : 0));
                }
            }
        }
        return dp[0][n-1];
    }
}
```
