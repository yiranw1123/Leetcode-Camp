232. 用栈实现队列

用两个栈实现队列，先进先出。一个栈用来记入栈元素，另一个栈用来逆序pop

class MyQueue {
    Deque<Integer> inStack;
    Deque<Integer> outStack;

    public MyQueue() {
        inStack = new LinkedList<Integer>();
        outStack = new LinkedList<Integer>();
    }
    
    public void push(int x) {
        inStack.push(x);
    }
    
    public int pop() {
        if(outStack.isEmpty()){
            in2out();
        }
        return outStack.pop();
    }
    
    public int peek() {
        if(outStack.isEmpty()){
            in2out();
        }
        return outStack.peek();
    }
    
    public boolean empty() {
        return inStack.isEmpty() && outStack.isEmpty();
    }

    private void in2out() {
        while (!inStack.isEmpty()) {
            outStack.push(inStack.pop());
        }
    }
}


225. 用队列实现栈

class MyStack {
    Queue<Integer> q = new LinkedList<>();
    int top_element = 0;

    public MyStack() {
    }
    
    public void push(int x) {
        q.offer(x);
        top_element = x;
    }
    
    public int pop() {
        int size = q.size();
        int i = size - 1;
        while (size >2){
            int num = q.poll();
            q.offer(num);
            size--;
        }
        top_element = q.peek();
        q.offer(q.poll());
        return q.poll();
    }
    
    public int top() {
        return top_element;
    }
    
    public boolean empty() {
        return q.isEmpty();
    }
}
