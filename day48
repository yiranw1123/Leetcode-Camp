rob 3

class Solution {
    Map<TreeNode, Integer> memo = new HashMap<>();
    public int rob(TreeNode root) {
        if(root == null) return 0;
        if(memo.containsKey(root)) return memo.get(root);

        int do_it = root.val 
                    +(root.left == null ? 0 : 
                        rob(root.left.left) + rob(root.left.right))
                    + (root.right == null ? 0 :
                        rob(root.right.left) + rob(root.right.right));
        int not_do = rob(root.left) + rob(root.right);
        int res = Math.max(do_it, not_do);
        memo.put(root, res);
        return res;
    }
}

rob 2

public int rob(int[] nums) {
    int n = nums.length;
    //抢或不抢第i个房子
    int[][] dp = new int[n][2];
    dp[0][0] = nums[0];
    //0 rob 1 not rob
    for(int i = 1;i<n;i++){
        //抢第i个房子，
        dp[i][0] = dp[i-1][1] + nums[i-1];
        //不抢第二个的时候，取前一个房子抢或不抢的最大值
        dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0]);
    }
    return Math.max(dp[n-1][0], dp[n-1][1]);
}

public int rob(int[] nums) {
    int n = nums.length;
    //抢或不抢第i个房子
    //0 rob 1 not rob
    int[] dp = new int[2];
    dp[0] = nums[0];

    for(int i = 1;i<n;i++){
        int temp = dp[0];
        dp[0] = Math.max(dp[1] + nums[i], dp[0]);
        dp[1] = Math.max(dp[1], temp);
    }
    return Math.max(dp[0],dp[1]);
}

rob 1

public int rob(int[] nums) {
    int n = nums.length;
    //抢或不抢第i个房子
    int[][] dp = new int[n][2];
    dp[0][0] = nums[0];
    //0 rob 1 not rob
    for(int i = 1;i<n;i++){
        //抢第i个房子，
        dp[i][0] = dp[i-1][1] + nums[i-1];
        //不抢第二个的时候，取前一个房子抢或不抢的最大值
        dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0]);
    }
    return Math.max(dp[n-1][0], dp[n-1][1]);
}

public int rob(int[] nums) {
    int n = nums.length;
    //抢或不抢第i个房子
    //0 rob 1 not rob
    int[] dp = new int[2];
    dp[0] = nums[0];

    for(int i = 1;i<n;i++){
        int temp = dp[0];
        dp[0] = Math.max(dp[1] + nums[i], dp[0]);
        dp[1] = Math.max(dp[1], temp);
    }
    return Math.max(dp[0],dp[1]);
}
