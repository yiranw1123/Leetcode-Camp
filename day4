24.两两交换链表里的元素

用dummy head来记录需要交换的两个节点的前一个节点。


    public ListNode swapPairs(ListNode head) {
        ListNode dummy  = new ListNode(-1);
        dummy.next = head;
        ListNode curr = dummy;
        ListNode temp;
        ListNode first;
        ListNode second;
        
        //单双数长度的链表
        while(curr.next != null && curr.next.next != null){
     
            //更新temp，first和second
            temp = curr.next.next.next;
            first = curr.next;
            second = curr.next.next;             

            curr.next = second;
            second.next = first;
            first.next = temp;

            curr = curr.next.next; //每次处理两个node

        }
        return dummy.next;
    }
  
19. 删除链表倒数第n个节点

删除第n个节点，需要找到倒数第n+1个节点，然后将其和倒数第n-1个节点相连
    
    
   public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode dummy = new ListNode(-1);
        dummy.next =head;
        ListNode node = nthFromEnd(dummy, n+1);
        node.next = node.next.next;
        return dummy.next;


    }
    private ListNode nthFromEnd(ListNode head, int n){
        ListNode p1 = head;
        for(int i = 0;i<n;i++) p1 = p1.next;
        ListNode p2 = head;
        while(p1 != null){
            p1 = p1.next;
            p2 = p2.next;
        }
        return p2;
    }
    
    
160.相交链表

    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode p1 = headA, p2 = headB;
        while(p1 != p2){
            if(p1 == null) p1 = headB;
            else p1 = p1.next;
            if(p2 == null) p2 = headA;
            else p2 = p2.next;
        }
        return p1;
    }
    
142.环形链表2


    public ListNode detectCycle(ListNode head) {
        ListNode slow = head, fast = head;

        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
            if(slow == fast){
                ListNode start = head;
                while(start != slow){
                    start = start.next;
                    slow = slow.next;
                }
                return start;
            }
        }

        return null;
    }
