level order traversal

用队列来实现先进先出
记录每层节点数量
java queue api 需要熟悉


102. level order 1
    
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return new LinkedList<>();
        List<List<Integer>> res = new LinkedList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        
        while(!q.isEmpty()){
            int levelSize = q.size();
            List<Integer> level = new LinkedList<>();
            while(levelSize>0){
                TreeNode curr = q.poll();
                level.add(curr.val);
                if(curr.left != null) q.offer(curr.left);
                if(curr.right != null) q.offer(curr.right);
                levelSize--;
            }
            res.add(level);
        }
        return res;
    }
    
    107.bottom up level order traversal
    
    linkedlist api addFirst()
    
    
        public List<List<Integer>> levelOrderBottom(TreeNode root) {
        LinkedList<List<Integer>> res = new LinkedList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root != null) q.offer(root);

        while(!q.isEmpty()){
            List<Integer> level = new LinkedList<>();
            int levelSize = q.size();
            while(levelSize>0){
                TreeNode curr = q.poll();
                if(curr.left != null) q.offer(curr.left);
                if(curr.right != null)q.offer(curr.right);
                level.add(curr.val);
                levelSize--;
            }
            res.addFirst(level);
        }
        return res;
    }
    
    
    199.二叉树右视图
    
        public List<Integer> rightSideView(TreeNode root) {
        List<Integer> res = new LinkedList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root != null) q.offer(root);

        while(!q.isEmpty()){
            LinkedList<TreeNode> level = new LinkedList<>();
            int levelSize = q.size();
            while(levelSize >0) {
                TreeNode curr = q.poll();
                if(levelSize == 1) res.add(curr.val);
                if(curr.left != null) q.offer(curr.left);
                if(curr.right != null) q.offer(curr.right);
                levelSize--;
            }
        }
        return res;
    }
    
   二叉树层平均值
  
        public List<Double> averageOfLevels(TreeNode root) {
        List<Double> res = new LinkedList<>();
        Queue<TreeNode> q = new LinkedList<>();
        if(root != null) q.offer(root);

        while(!q.isEmpty()){
            int levelSize = q.size();
            double sum = 0;
            for(int i = 0;i<levelSize;i++){
                TreeNode n = q.poll();
                sum += n.val;
                if(n.left != null) q.offer(n.left);
                if(n.right != null) q.offer(n.right);
            }
            res.add(sum/levelSize);
        }
        return res;
    }
   
   多叉树层序遍历
    
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> res = new ArrayList<>();
        if(root == null) return res;
        Queue<Node> q = new LinkedList<>();
        q.offer(root);
       
        while(!q.isEmpty()){
            List<Integer> level = new ArrayList<>();
            int levelSize = q.size();
            for(int i = 0;i<levelSize;i++){
                Node n = q.poll();
                level.add(n.val);
                for(Node child: n.children){
                    q.offer(child);
                }
            }
            res.add(level);
        }
        return res;

    }
