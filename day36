435. 无重叠区间 
按start从小往大排序， 当遇见重叠区间时增加cnt，更新最小右边界为 Math.min(pre, intervals[i][1])
  
  public int eraseOverlapIntervals(int[][] intervals) {
        Arrays.sort(intervals, (a,b) ->{
            return Integer.compare(a[0],b[0]);
        });

        int remove = 0;
        int pre = intervals[0][1];

        for(int i = 1;i<intervals.length;i++){
            if(pre> intervals[i][0]){
                remove++;
                pre = Math.min(pre, intervals[i][1]);
            }
            else pre = intervals[i][1];
        }
        return remove;
    }

  
56. 合并区间

      public int[][] merge(int[][] intervals) {
        LinkedList<int[]> res = new LinkedList<>();
        // sort by increasing start time
        Arrays.sort(intervals, (a,b) ->{
            return a[0] - b[0];
        });

        res.add(intervals[0]);
        for(int i = 1;i<intervals.length;i++){
            int[] curr = intervals[i];
            int[] last = res.getLast();
            if(curr[0] <= last[1]){
                last[1] = Math.max(last[1], curr[1]);
            } else{
                res.add(curr);
            }
        }
        return res.toArray(new int[0][0]);
    }



763.划分字母区间 

  记录每个字符最远出现的idx

  用两个元素 idx 记录遍历过的字母的最远idx， last记录上一个字符的结束点， 遍历字符串更新idx 和last得到答案

public List<Integer> partitionLabels(String s) {
        int[] nums = new int[26];

        for(int i = 0;i<s.length();i++){
            nums[s.charAt(i) - 'a'] = i;
        }
        for(int i = 0;i< nums.length;i++){
            System.out.println("i: " + i + " cnt: " +nums[i]);
        }

        List<Integer> res = new ArrayList<>();
        int last = -1;
        int idx =0;
        for(int i = 0;i<s.length();i++){
            idx = Math.max(nums[s.charAt(i) - 'a'], idx);
            if(idx == i){
                res.add(idx - last);
                last = idx;
            }
        }
        return res;
    }
