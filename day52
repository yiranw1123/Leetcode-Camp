**[300. 最长递增子序列](https://leetcode.cn/problems/longest-increasing-subsequence/)**

o（n^2）

```java
public int lengthOfLIS(int[] nums) {
        int[] dp = new int[nums.length];

        Arrays.fill(dp, 1);

        for(int i = 0;i<nums.length;i++){
            for(int j = 0;j<i;j++){
                if(nums[i] > nums[j]){
                    dp[i] = Math.max(dp[j] + 1, dp[i]);
                }
            }
        }

        int res = 0;
        for(int i = 0;i<dp.length;i++){
            res = Math.max(res,dp[i]);
        }
        return res;
    }
```

**[674. 最长连续递增序列](https://leetcode.cn/problems/longest-continuous-increasing-subsequence/)**

```java
public int findLengthOfLCIS(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        int res = 1;
        Arrays.fill(dp, 1);
        for(int i = 1;i<n;i++){
            if(nums[i] > nums[i-1]){
                dp[i] = dp[i-1] + 1;
            }
            res = dp[i] > res ? dp[i] : res;
        }  
        return res; 
    }

    public int findLengthOfLCIS(int[] nums) {
        int n = nums.length;
        int cnt =1;
        int res = 1;
        for(int i = 1;i<n;i++){
            if(nums[i] > nums[i-1]){
                cnt++;
            } else {
                cnt = 1;
            }
            res = Math.max(cnt, res);
        }
        return res;
    }
```

**[718. 最长重复子数组](https://leetcode.cn/problems/maximum-length-of-repeated-subarray/)**

dp[i][j] ：以下标i - 1为结尾的A，和以下标j - 1为结尾的B，最长重复子数组长度为dp[i][j]。 

第0行和第0列，都为零（空字符串和另一个字符串最长重复子数组长度为0）

```java
public int findLength(int[] nums1, int[] nums2) {
    int m = nums1.length, n = nums2.length;
    //dp[i][j] ：以下标i - 1为结尾的A，和以下标j - 1为结尾的B，最长重复子数组长度为dp[i][j]。 
    int[][] dp = new int[m+1][n+1];
    int res = 0;
    for(int i = 1;i<=m;i++){
        for(int j = 1;j<=n;j++){
            if(nums1[i-1] == nums2[j-1]){
                dp[i][j]= dp[i-1][j-1] +1;
            }
            res = Math.max(res, dp[i][j]);
        }
    }
    return res;
}

//滚动数组
public int findLength(int[] nums1, int[] nums2) {
    int[] dp = new int[nums2.length + 1];
    int result = 0;

    for (int i = 1; i <= nums1.length; i++) {
        for (int j = nums2.length; j > 0; j--) {
            if (nums1[i - 1] == nums2[j - 1]) {
                dp[j] = dp[j - 1] + 1;
            } else {
                dp[j] = 0;
            }
            result = Math.max(result, dp[j]);
        }
    }
    return result;
}
```
