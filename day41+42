343.整数拆分

dp[i] - 将i拆分成两个或以上的数字的最大乘积
dp[0], dp[1] 不成立，无法被拆分成两个正整数

  
public int integerBreak(int n) {
      int[] dp = new int[n+1];
      dp[2] = 1;
      for(int i = 3;i<=n;i++){
          for(int j = 1;j<=i-j;j++){
              dp[i] = Math.max(dp[i], Math.max(j*(i-j), j * dp[i-j]));
          }
      }
      return dp[n];
}

96.不同的二叉树


    public int numTrees(int n) {
        int[] dp = new int[n+1];
        dp[0] = 1;
        dp[1] = 1;
        for(int i = 2;i<=n;i++){
            for(int j = 1;j<=i;j++){
                dp[i] += dp[j-1] * dp[i-j];
            }
        }
        return dp[n];
    }


416 分割等和子集
  
    public boolean canPartition(int[] nums) {
        int sum = Arrays.stream(nums).sum();
        if(sum % 2 != 0) return false;
        sum /= 2;
        int n = nums.length;

        boolean[][] dp = new boolean[n+1][sum+1];
        for(int i = 0;i<=n;i++) dp[i][0] = true;
        for(int i = 1;i<=n;i++){
            for(int j = 1;j<=sum;j++){
                if(j - nums[i-1] <0) dp[i][j] = dp[i-1][j];
                else dp[i][j] = dp[i-1][j] ||dp[i-1][j-nums[i-1]];
            }
        }
        return dp[n][sum];
    }
