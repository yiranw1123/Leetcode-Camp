700. 二叉搜索树中的搜索

public TreeNode searchBST(TreeNode root, int val) {
        if(root == null) return null;
        if(root.val < val) return searchBST(root.right, val);
        else if(root.val > val) return searchBST(root.left, val);
        else return root;
}


**[654. 最大二叉树](https://leetcode.cn/problems/maximum-binary-tree/)**

给定一个不重复的整数数组 nums 。 最大二叉树 可以用下面的算法从 nums 递归地构建:

创建一个根节点，其值为 nums 中的最大值。
递归地在最大值 左边 的 子数组前缀上 构建左子树。
递归地在最大值 右边 的 子数组后缀上 构建右子树。
返回 nums 构建的 最大二叉树 。


class Solution {
    public TreeNode constructMaximumBinaryTree(int[] nums) {
        return traverse(nums, 0, nums.length);
    }
    public TreeNode traverse(int[] nums, int begin, int end){
        if(begin >= end) return null;
        int max = Integer.MIN_VALUE;
        int maxIdx = -1;
        for(int i = begin;i<end;i++){
            if(nums[i] >max){
                max = nums[i];
                maxIdx = i;
            }
        }
        TreeNode root = new TreeNode(nums[maxIdx]);
        root.left = traverse(nums, begin, maxIdx);
        root.right = traverse(nums, maxIdx+1, end);
        return root;

    }
}

**[617. 合并二叉树](https://leetcode.cn/problems/merge-two-binary-trees/)**

public TreeNode mergeTrees(TreeNode root1, TreeNode root2) {
        if(root1 == null) return root2;
        if(root2 == null) return root1;
        int sum = root1.val + root2.val;
        TreeNode newNode = new TreeNode(sum);
        newNode.left = mergeTrees(root1.left, root2.left);
        newNode.right = mergeTrees(root1.right, root2.right);
        return newNode;
}

**[98. 验证二叉搜索树](https://leetcode.cn/problems/validate-binary-search-tree/)**

验证二叉搜索树 - 左孩子要比左子树里所有的元素大，右孩子要比右子树所有元素小

中序遍历中判断节点的有序性

class Solution {
    TreeNode max;
    public boolean isValidBST(TreeNode root) {
        if(root == null) return true;
        boolean left = isValidBST(root.left);
        if(!left) return false;
        if(max != null && root.val <= max.val){return false;}
        max = root;
        boolean right = isValidBST(root.right);
        return right;

    }
}
530二叉搜索树最小差值
class Solution {
    TreeNode pre;
    int min = Integer.MAX_VALUE;
    public int getMinimumDifference(TreeNode root) {
        if(root == null) return 0;
        traverse(root);
        return min;
    }
    private void traverse(TreeNode root){
        if(root == null) return;
        traverse(root.left);
        if(pre != null){
            min = Math.min(min, root.val - pre.val);
        }
        pre = root;
        traverse(root.right);
    }
}


**[501. 二叉搜索树中的众数](https://leetcode.cn/problems/find-mode-in-binary-search-tree/)**

中序，cnt来记录当前元素重复数量，maxcnt来记录全局最多的元素。

class Solution {
    TreeNode pre;
    int maxCnt = 0;
    int cnt = 0;
    ArrayList<Integer> res;
    public int[] findMode(TreeNode root) {
        res = new ArrayList<>();
        traverse(root);
        int[] arr = new int[res.size()];
        for(int i = 0;i<res.size();i++){
            arr[i] = res.get(i);
        }
        return arr;

    }
    private void traverse(TreeNode root){
        if(root == null) return;
        traverse(root.left);
        int rootValue = root.val;
        if(pre == null || pre.val != root.val) cnt=1;
        else cnt++;
        if(cnt > maxCnt){
            res.clear();
            res.add(rootValue);
            maxCnt = cnt;
        } else if(cnt == maxCnt){
            res.add(rootValue);
        }
        pre = root;
        traverse(root.right);
    }
}


**[235. 二叉搜索树的最近公共祖先](https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/)**

二叉搜索树是有序的，所以第一次遇到node curr在p和q之间，curr就是他们的最近公共祖先

class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        //树中数值不重复
        return LCA(root, p, q);
    }
    private TreeNode LCA(TreeNode root, TreeNode p, TreeNode q){
        if(root == null){return null;}
        if(root.val < p.val && root.val <q.val){
            return LCA(root.right, p, q);
        }
        if(root.val > p.val && root.val > q.val){
            return LCA(root.left, p, q);
        }
        return root;
    }
}


**[236. 二叉树的最近公共祖先](https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/)**


class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        if(root == null || root == p || root == q) return root;
        //后序 先找到左右

        TreeNode left = lowestCommonAncestor(root.left, p, q);
        TreeNode right = lowestCommonAncestor(root.right, p, q);

        if(left == null && right == null) return null;
        else if(left == null && right != null) return right;
        else if(left != null && right == null) return left;
        else{ return root;}
    }
}


**[701. 二叉搜索树中的插入操作](https://leetcode.cn/problems/insert-into-a-binary-search-tree/)**


public TreeNode insertIntoBST(TreeNode root, int val) {
        if(root == null) return new TreeNode(val);
        if(root.val < val){
            root.right = insertIntoBST(root.right, val);
        } else if(root.val > val){
            root.left= insertIntoBST(root.left, val);
        }
        return root;
    }


**[450. 删除二叉搜索树中的节点](https://leetcode.cn/problems/delete-node-in-a-bst/)**


public TreeNode deleteNode(TreeNode root, int key) {
    if(root == null) return null;
    if(root.val == key){
        //如果被删除节点为叶子结点
        if(root.left == null && root.right == null) return null;
        //如果左孩子不为空
        else if(root.left != null && root.right == null) return root.left;
        //如果右孩子不为空
        else if(root.left == null && root.right != null) return root.right;
        //如果左右孩子都不为空
        else{
            //左右孩子节点都不为空，
            //则将删除节点的左子树头结点（左孩子）放到删除节点的右子树的最左面节点的左孩子上
            //返回删除节点右孩子为新的根节点。
            TreeNode curr = root.right;
            while(curr.left != null){
                curr = curr.left;
            }
            curr.left = root.left;
            return root.right;
        }
    }
    if(key < root.val) root.left = deleteNode(root.left, key);
    if(key > root.val) root.right = deleteNode(root.right, key);
    return root;
}
