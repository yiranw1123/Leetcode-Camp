347. 前 K 个高频元素
    public int[] topKFrequent(int[] nums, int k) {
        Map<Integer, Integer> count = new HashMap<>();
        for(int i: nums){
            count.put(i, count.getOrDefault(i, 0) + 1);
        }

        PriorityQueue<Integer> pq = new PriorityQueue<>(k, new Comparator<Integer>(){
            public int compare(Integer a, Integer b){
                return count.get(a) - count.get(b);
            }
        });
        int n = nums.length;
        int size = 0;
        for(Integer j: count.keySet()){
            if(size < k){
                pq.offer(j);
                size++;
            } else if(count.get(j) > count.get(pq.peek())){
                //如果当前元素比栈顶元素大
                pq.poll();
                pq.offer(j);
            }
            System.out.println(pq);
        }
        int[] res = new int[k];
        for(int i = 0;i<k;i++){
            res[i] = pq.poll();
        }
        return res;
    }
239. 滑动窗口最大值
    
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        //用deque存数组下标
        Deque<Integer> q = new ArrayDeque<>();
        int[] res = new int[n - k + 1];
        int idx = 0;

        for(int i = 0;i < n;i++){
            //删去栈内所有不在k范围内的元素
            while(!q.isEmpty() && q.peek() < i - k + 1) q.poll();
            //把栈内比nums[i]小的元素都pop出去，保证队列单调递减
            while(!q.isEmpty() && nums[q.peekLast()] < nums[i]) q.pollLast();
            q.offer(i);           
            if(i >= k-1) {
                res[idx++] = nums[q.peek()];
            }
        }
        return res;
    }
    
    
