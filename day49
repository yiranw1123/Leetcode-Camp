121.股票1

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];
        //0 hold 1 buy
        dp[0][1] = -prices[0];

        for(int i = 1;i<n;i++){
            dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] + prices[i]);
            dp[i][1] = Math.max(dp[i-1][1],  -prices[i]);
        }
        return dp[n-1][1];
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int hold = -prices[0];
        int not_hold = 0;

        for(int i = 1;i<n;i++){
            int temp = hold;
            hold = Math.max(hold, -prices[i]);
            not_hold = Math.max(not_hold, temp + prices[i]);
        }
        return not_hold;
    }


    public int maxProfit(int[] prices) {
        int res = 0;
        int minPrice = prices[0];

        for(int i =1;i<prices.length;i++){
            if (prices[i] > minPrice) res = Math.max(res, prices[i] - minPrice);
            minPrice = Math.min(minPrice, prices[i]);
        }
        return res;
    }
}

122.股票2
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] dp = new int[n][2];

        //0 hold 1 not hold
        dp[0][0] =-prices[0];

        for(int i = 1;i<n;i++){
            dp[i][0] = Math.max(dp[i-1][0], dp[i-1][1] - prices[i]);
            dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0] + prices[i]);
        }
        return dp[n-1][1];
    }

    public int maxProfit(int[] prices) {
        int n = prices.length;
        int hold = -prices[0];
        int not_hold = 0;

        for(int i = 1;i<n;i++){
            int temp = hold;
            hold = Math.max(hold, not_hold - prices[i]);
            not_hold = Math.max(not_hold, temp +prices[i]);
        }
        return not_hold;
    }
}
