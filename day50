股票3

class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        //0 no hold
        // 1 1st buy 2 1st sell
        // 3 2nd buy 4 2nd sell
        int[][] dp = new int[n][5];

        dp[0][1] = -prices[0];
        dp[0][3] = -prices[0];

        for(int i = 1;i<n;i++){
            //1st buy
            dp[i][1] = Math.max(dp[i-1][1], dp[i-1][0]- prices[i]);
            //1st sell
            dp[i][2] = Math.max(dp[i-1][2], dp[i-1][1] + prices[i]);
            //2nd buy
            dp[i][3] = Math.max(dp[i-1][3], dp[i-1][2] - prices[i]);
            //2nd sell
            dp[i][4] = Math.max(dp[i-1][4], dp[i-1][3] + prices[i]);
        }

        return dp[n-1][4];
    }
}


股票4

class Solution {
    public int maxProfit(int k, int[] prices) {
        if(prices.length == 0) return 0;
        int len = prices.length;
        int[][][] dp = new int[len][k+1][2];

        //0 not hold 
        //1 hold
        for(int i = 0;i<=k;i++){
            dp[0][i][1] = -prices[0];
        }

        for(int i = 1;i<len;i++){
            for(int j = 1;j<=k;j++){
                //not hold
                dp[i][j][0] = Math.max(dp[i-1][j][0], dp[i-1][j][1] + prices[i]);
                //hold
                dp[i][j][1] = Math.max(dp[i-1][j][1], dp[i-1][j-1][0] - prices[i]);
            }
        }
        return dp[len-1][k][0];
    }
}
