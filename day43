1049.最后一块石头的重量

    //因为要剩余石头的重量最小，相当于把总石头重量分成两份，让两份的差7最小
    //最好情况是当两堆重量相等时，剩余石头重量为0
    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        int sum = 0;
        for(int i = 0;i<n;i++){
            sum += stones[i];
        }
        int target = sum/2;
        //使用物品0 ->i， 背包容量为j的情况下，背包中的最大价值
        int[][] dp = new int[n][target+1];

        for(int j = stones[0];j<=target;j++){
            dp[0][j] = stones[0];
        }
        //循环每个石头
        for(int i = 1;i<n;i++){
            //循环背包容量
            for(int j = 1;j<=target;j++){
                //当前石头大于背包容量，无法使用
                if(j < stones[i]){
                    dp[i][j] = dp[i-1][j];
                } else{
                    dp[i][j] = Math.max(dp[i-1][j], dp[i-1][j - stones[i]] + stones[i]);
                }
            }
        }
        return sum - 2 * dp[n-1][target];
    }

//滚动数组


    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        int sum = 0;
        for(int i = 0;i<n;i++){
            sum += stones[i];
        }
        int target = sum/2;

        int[][] dp = new int[2][target+1];
        for(int i = 1;i <= n;i++){
            int w = stones[i-1];
            int a = i &1, b = (i-1) & 1;
            for (int j = 0;j<=target;j++){
                dp[a][j] = dp[b][j];
                if(j>=w) dp[a][j] = Math.max(dp[a][j], dp[b][j-w] + w);
            }
        }
        return Math.abs(sum - dp[n&1][target] - dp[n&1][target]);
    }

//一维优化

    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        int sum = 0;
        for(int i = 0;i<n;i++){
            sum += stones[i];
        }
        int target = sum/2;

        int[] dp = new int[target+1];
        for(int i = 0;i < n;i++){
            for (int j = target;j>=stones[i];j--){
                dp[j] = Math.max(dp[j], dp[j-stones[i]] + stones[i]);
            }
        }
        return sum - dp[target] *2;
    }



494.目标和

//用物品0 -j的物品装满容量为i的背包的总方法数
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for(int n: nums) sum += n;
        if(sum < Math.abs(target) || (sum + target) % 2 == 1) return 0;
        return subsets(nums, (sum+target) /2);
    }
    private int subsets(int[] nums, int target){
        int[][] dp = new int[nums.length+1][target+1];
        dp[0][0] = 1;
        for(int i = 1;i<=nums.length;i++){
            for(int j = 0;j<=target;j++){
                if(nums[i-1] <= j){
                    dp[i][j] = dp[i-1][j-nums[i-1]] + dp[i-1][j];
                } else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        return dp[nums.length][target];
    }


//装满容量为i的书包有多少种方法
    public int findTargetSumWays(int[] nums, int target) {
        int sum = 0;
        for(int n: nums) sum += n;
        int total = (sum + target) / 2;
        if(sum < Math.abs(target) || (sum + target) % 2 == 1) return 0;
        int[] dp = new int[total+1];
        dp[0] = 1;
        for(int i = 0;i<nums.length;i++){
            for(int j = total;j>=nums[i];j--){
                dp[j] += dp[j-nums[i]];
            }
        }
        return dp[total];
    }


474.1和0
    public int findMaxForm(String[] strs, int m, int n) {
        int len = strs.length;
        int[][] cnt = new int[len][2];
        for(int i = 0;i<len;i++){
            int zero = 0, one = 0;
            for(char c : strs[i].toCharArray()){
                if(c == '0') zero++;
                else one++;
            }
            cnt[i] = new int[]{zero, one};
        }

        int[][] dp = new int[m+1][n+1];
        for(int k = 0;k<len;k++){
            int zero = cnt[k][0], one = cnt[k][1];
            for(int i = m;i>=zero;i--){
                for(int j = n;j>=one;j--){
                    dp[i][j] = Math.max(dp[i][j], dp[i-zero][j-one]+1);
                }
            }
        }
        return dp[m][n];
    }
