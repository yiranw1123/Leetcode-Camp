93.复原ip地址

字符串分割问题- 递归结束条件 - 当index在字符串长度末尾
用stringbuilder来优化空间+时间
需要在backtrack中记录句号的数量，合法ip地址应该有四个子串

    List<String> res = new ArrayList<>();
    public List<String> restoreIpAddresses(String s) {
        StringBuilder sb = new StringBuilder(s);
        backtracking(sb, 0, 0);
        return res;
    }
    private void backtracking(StringBuilder s, int startIndex, int dotCnt){
        if(dotCnt == 3){
            if(isValid(s, startIndex, s.length() -1)){
                res.add(s.toString());
            }
            return;
        }
        for(int i = startIndex;i<s.length();i++){
            if(isValid(s, startIndex, i)){
                s.insert(i+1,'.');
                backtracking(s,i+2, dotCnt+1);
                s.deleteCharAt(i+1);
            }else break;
        }

    }
    private boolean isValid(StringBuilder s, int start, int end){
        if(start > end) return false;
        if(s.charAt(start) == '0' && start != end) return false;
        int num = 0;

        for(int i = start;i<= end;i++){
            int digit = s.charAt(i) - '0';
            num = num *10 + digit;
            if(num >255) return false;
        }
        return true;
    }


78 子集

    List<List<Integer>> res = new ArrayList<>();
    LinkedList<Integer> curr = new LinkedList<>(); 
    public List<List<Integer>> subsets(int[] nums) {
        backtracking(nums, 0);
        return res;
    }
    private void backtracking(int[] nums, int startIndex){
        res.add(new ArrayList<>(curr));
        
        //终止条件省略了
        
        for(int i = startIndex;i<nums.length;i++){
            curr.add(nums[i]);
            backtracking(nums, i+1);
            curr.removeLast();
        }
    }

90.子集2

    List<List<Integer>> res = new ArrayList<>();
    LinkedList<Integer> curr = new LinkedList<>();
    boolean[] used;
    public List<List<Integer>> subsetsWithDup(int[] nums) {
        used = new boolean[nums.length];
        Arrays.fill(used, false);
        Arrays.sort(nums);
        backtracking(nums, 0);
        return res;
    }
    private void backtracking(int[] nums, int startIndex){
        res.add(new ArrayList<>(curr));

        for(int i = startIndex;i<nums.length;i++){
            if(i >0 && nums[i-1] == nums[i] && !used[i-1]) continue;
            else{
                curr.add(nums[i]);
                used[i] = true;
                backtracking(nums, i+1);
                curr.removeLast();
                used[i] = false;
            }
        }
    }
