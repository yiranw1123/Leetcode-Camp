491.递增子序列

同一层，如果已经用过的元素，就不能二次选择了。used数组每层都会被overwrite


  List<List<Integer>> res = new ArrayList<>();
  List<Integer> curr = new ArrayList<>();
  public List<List<Integer>> findSubsequences(int[] nums) {
      backtracking(nums, 0);
      return res;
  }
  private void backtracking(int[] nums, int startIndex){
      if(curr.size() >= 2){
          res.add(new ArrayList<>(curr));
      }
      HashSet<Integer> s =new HashSet<>();
      for(int i = startIndex;i<nums.length;i++){
          if(!curr.isEmpty() && curr.get(curr.size() - 1) > nums[i] || s.contains(nums[i])) continue;
          s.add(nums[i]);
          curr.add(nums[i]);
          backtracking(nums,i+1);
          curr.remove(curr.size() - 1);
      }
  }

46.全排列

    List<List<Integer>> res = new ArrayList<>();
    LinkedList<Integer> curr = new LinkedList<>();
    boolean[] used;
    public List<List<Integer>> permute(int[] nums) {
        if(nums.length == 0) return res;
        used = new boolean[nums.length];
        backtracking(nums);
        return res;
    }
    private void backtracking(int[] nums){
        if(curr.size() == nums.length){
            res.add(new ArrayList<>(curr));
            return;
        }

        for(int i = 0;i<nums.length;i++){
            if(used[i]) continue;
            used[i] = true;
            curr.add(nums[i]);
            backtracking(nums);
            used[i] = false;
            curr.removeLast();
        }
    }

47.全排列2



    List<List<Integer>> res = new ArrayList<>();
    LinkedList<Integer> curr = new LinkedList<>();
    boolean[] used;

    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        used = new boolean[nums.length];
        Arrays.fill(used, false);
        backtracking(nums);
        return res;
    }
    private void backtracking(int[] nums){
        if(curr.size() == nums.length){
            res.add(new ArrayList<>(curr));
            return;
        }

        for(int i = 0;i<nums.length;i++){
            if(i>0 && nums[i-1] == nums[i] && used[i-1] == false){continue;}
            if (used[i] == false){
                used[i] =true;
                curr.add(nums[i]);
                backtracking(nums);
                used[i] = false;
                curr.removeLast();
            }
        }
    }
