柠檬水找零

贪心 - 当收到20时，优先使用10

public boolean lemonadeChange(int[] bills) {
      int fiveCnt = 0;
      int tenCnt = 0;
      for(int i = 0;i<bills.length;i++){
          if(bills[i] == 5) fiveCnt++;
          else if(bills[i] == 10){
              tenCnt++;
              fiveCnt--;
          }
          else if(bills[i] == 20){
              if (tenCnt > 0){
                  fiveCnt -= 1;
                  tenCnt -=1;
              }
              else{
                  fiveCnt -=3;
              }
          }
          if(fiveCnt <0 || tenCnt <0) return false;
      }
      return true;
  }



按身高重建队列

  先按身高排列，在根据k将元素插到对的位置上


      public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people, (a,b) ->{
            if(a[0] == b[0]) return a[1] - b[1];
            return b[0] -a[0];
        });

        LinkedList<int[]> queue = new LinkedList<>();

        for(int[] p : people){
            queue.add(p[1], p);
        }

        return queue.toArray(new int[people.length][]);
    }
452.用最少数量的箭引爆气球

    public int findMinArrowShots(int[][] points) {
        Arrays.sort(points, (a,b) -> Integer.compare(a[0], b[0]));

        int cnt = 1;

        for(int i = 1;i<points.length;i++){
            if(points[i][0] > points[i-1][1]){
                cnt++;
            }
            else{
                //更改重叠气球最小右边界
                //最小右边界以前的气球需要一个箭，射在最小右边界
                points[i][1] = Math.min(points[i][1], points[i-1][1]);
            }
        }
        return cnt;
    }
